<macro name="printTypeParams(params)">
    ::if params.length > 0::
        &lt;
        ::foreach param params::
            <span class="type">::param::</span>
            ::if !repeat.param.last::, ::end::
        ::end::
        &gt;
    ::end::
</macro>

<macro name="printPlatforms(platforms)">
</macro>

<macro name="printLinkedPath(path, params)">
    ::if api.isKnownType(path)::
        <a class="type" title="::api.getSentenceDesc(api.resolveType(path))::" ::attr href api.pathToUrl(path)::>::api.getPathName(path)::</a>
    ::else::
        <span class="type">::api.getPathName(path)::</span>
    ::end::
    ::if params.length > 0::
        &lt;
        ::foreach param params::
            $$printLinkedType(::param::)
            ::if !repeat.param.last::, ::end::
        ::end::
        &gt;
    ::end::
</macro>

<macro name="printLinkedType(ctype)">
    ::switch ctype::
    ::case::Unknown
    ::case::$$printLinkedPath(::args[0]::,::args[1]::)
    ::case::$$printLinkedPath(::args[0]::,::args[1]::)
    ::case::$$printLinkedPath(::args[0]::,::args[1]::)
    ::case::
        ::if args[0].length == 0::
            $$printLinkedPath(::"Void"::,::[]::) -&gt;&nbsp;
        ::else::
            ::foreach arg args[0]::
                $$printLinkedType(::arg.t::) -&gt;&nbsp;
            ::end::
        ::end::
        $$printLinkedType(::args[1]::)
    ::case::
    {
        ::foreach field args[0]::
            ::field.name:::$$printLinkedType(::field.type::)
            ::if !repeat.field.last::, ::end::
        ::end::
    }
    ::case::$$printLinkedPath(::"Dynamic"::,::null::)::if args[0] != null::&lt;$$printLinkedType(::args[0]::)&gt;::end::
    ::case::$$printLinkedPath(::args[0]::,::args[1]::)
    ::end::
</macro>

<macro name="printModule(module)">
</macro>

<macro name="printFieldSignature(field, isStatic)">
    ::switch field.type::
        <code>
        <a href="#::field.name::"><span class="identifier">::field.name::</span></a>:$$printLinkedType(::field.type::)
        </code>

        ::switch field.set::
        ::case 1::
            <span class="label">read only</span>
        ::end::
        ::switch field.get::
        ::case 1::
            <span class="label">write only</span>
        ::end::

    ::case 4::
        <code>
        <a href="#::field.name::"><span class="identifier">::field.name::</span></a>
        $$printTypeParams(::field.params::) (
        ::foreach arg args[0]::
            ::if arg.opt::?::end::
            ::arg.name:: :$$printLinkedType(::arg.t::)
            ::if arg.value != null && arg.value != "null":: = ::arg.value::::end::
            ::if !repeat.arg.last::, ::end::
        ::end::
        )
        ::if field.name != "new"::
            :$$printLinkedType(::args[1]::)
        ::end::
        </code>
    ::end::
    
    ::if isStatic::
        <span class="label">static</span>
    ::end::
</macro>

<macro name="printInitExpr(expr)">
</macro>

<macro name="printClassBody(type)">
	::set showSection = false::
	::foreach field type.fields::
		::if field.isPublic && field.name == "new"::
            ::set isStatic = false::
			<h2>Constructor</h2>
			::use "class_field.mtt"::::end::
		::end::
	::end::

    ::set showSection = false::
    ::foreach field type.fields::
        ::if field.isPublic::
            ::switch field.type::
                ::eval showSection = true::
            ::case 4::
            ::end::
        ::end::
    ::end::
    ::if showSection::
        <h2>Properties</h2>
        ::foreach field type.fields::
            ::set isStatic = false::
            ::if field.isPublic::
                ::switch field.type::
                    ::use "class_field.mtt"::::end::
                ::case 4::
                ::end::
            ::end::
        ::end::
    ::end::

    ::set showSection = false::
    ::foreach field type.fields::
        ::if field.isPublic && field.name != "new"::
            ::switch field.type::
            ::case 4::
                ::eval showSection = true::
            ::end::
        ::end::
    ::end::
    ::if showSection::
        <h2>Methods</h2>
        ::foreach field type.fields::
            ::set isStatic = false::
            ::if field.isPublic && field.name != "new"::
                ::switch field.type::
                ::case 4::
                    ::use "class_field.mtt"::::end::
                ::end::
            ::end::
        ::end::
    ::end::

    ::set showSection = false::
    ::foreach field type.statics::
        ::if field.isPublic::
            ::switch field.type::
                ::eval showSection = true::
            ::case 4::
            ::end::
        ::end::
    ::end::
    ::if showSection::
        <h2>Static Properties</h2>
        ::foreach field type.statics::
            ::set isStatic = true::
            ::if field.isPublic::
                ::switch field.type::
                    ::use "class_field.mtt"::::end::
                ::case 4::
                ::end::
            ::end::
        ::end::
    ::end::

    ::set showSection = false::
    ::foreach field type.statics::
        ::if field.isPublic::
            ::switch field.type::
            ::case 4::
                ::eval showSection = true::
            ::end::
        ::end::
    ::end::
    ::if showSection::
        <h2>Static Methods</h2>
        ::foreach field type.statics::
            ::set isStatic = true::
            ::if field.isPublic::
                ::switch field.type::
                ::case 4::
                    ::use "class_field.mtt"::::end::
                ::end::
            ::end::
        ::end::
    ::end::
</macro>

<macro name="printPackage(type)">
	::if type.path.indexOf(".") >= 0::
		<p>package ::type.path.split(".").slice(0, -1).join(".")::</p>
	::end::
</macro>
